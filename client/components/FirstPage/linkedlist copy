// #include <stdio.h>
// #include <stdlib.h>
// #include <math.h>
// #include <assert.h>

// struct Node {
//     double data;
//     struct Node *next;
// };

// void print(const char *msg, struct Node *list)
// {
//     struct Node *node = list;
//     printf("%s: ", msg);
//     while (node) {
//         printf("-> %g ", node->data);
//         node = node->next;
//     }
//     printf("\n");
// }

// /*
//  * Create a node that holds the given data x,
//  * and insert the node right after predecessor.
//  *
//  * If predecessor == NULL, return a new list containing the new node.
//  *
//  * Returns NULL if malloc for the node fails.
//  */
// struct Node *insert(struct Node *predecessor, double x)
// {
//     struct Node *node = (struct Node *)malloc(sizeof(struct Node));
//     if (node == NULL)
//         return NULL;

//     node->data = x;

//     if (predecessor == NULL) {
//         // no predecessor passed in; return a new list.
//         node->next = NULL;
//     } else {
//         // insert the new node between predecessor and predecessor->next.
//         node->next = predecessor->next;
//         predecessor->next = node;
//     }

//     return node;
// }

// struct Node {
//     double data;
//     struct Node *next;
// };






// /*
//  * Returns the first node containing x in the given list.
//  * Returns NULL if no node contains x.
//  */

// struct Node *find(struct Node *list, double x)
// {
//     while (list) {
//         if (list->data == x) {
//             return list;
//         }
//         list = list->next;
//     }
//     return NULL;
// }

// /*
//  * Removes the 1st node containing x from the list, *listPtr.
//  * Returns 1 if a node is removed, 0 otherwise.
//  *
//  * Note that a pointer to a list (rather than a list) is passed in
//  * so that the caller's list can be modified if the head node gets 
//  * removed.
//  */
// int remove_node(struct Node **listPtr, double x)

// // BEN this one uses swap
// {
//     // check for NULL pointer or empty list, 
//     // in which cases we simply return 0;
//     if (listPtr && *listPtr) {

//         // currentNode is the node we are looking at.
//         struct Node *currentNode = *listPtr;

//         if (currentNode->data == x) {

//             // The data matches x; let's remove the currentNode.
//             // We modify the caller's list by changing *listPtr.
//             // Note that "currentNode = currentNode->next" won't work
//             // because currentNode is just a local variable.
//             *listPtr = currentNode->next;

//             // deallocate the currentNode and return 1.
//             free(currentNode);
//             return 1;

//         } else {

//             // The data does not match. Recursively call remove_node()
//             // again with the list starting from the 2nd element.
//             return remove_node(&currentNode->next, x);
//         }
//     }

//     return 0;
// }
// int main()
// {
//     int i;
//     double a[] = { 0.0, 1.0, 2.0, 3.0 };
//     int n = sizeof(a) / sizeof(a[0]);

//     // An initially empty list.
//     struct Node *list = NULL;

//     // Insert the first node.
//     list = insert(NULL, a[0]);

//     // Then we use insert() to successively append to the list.
//     struct Node *node = list;
//     for (i = 1; i < n; i++) {
//         node = insert(node, a[i]);
//     }
//     print("original list", list);

//     // test find() function
//     assert(find(list, 0.0) == list);
//     assert(find(list, 1.0) == list->next);
//     assert(find(list, 2.0) == list->next->next);
//     assert(find(list, 3.0) == list->next->next->next);
//     assert(find(list, 2.1) == NULL);

//     // insert 2.1 right after 2.0
//     node = find(list, 2.0);
//     node = insert(node, 2.1);
//     assert(node->next->data == 3.0);
//     print("inserted 2.1", list);

//     // remove in this order: 2.1, 0.0, 3.0, 1.0, 2.0
//     i = remove_node(&list, 2.1); print("removed 2.1", list); assert(i==1);
//     i = remove_node(&list, 0.0); print("removed 0.0", list); assert(i==1);
//     i = remove_node(&list, 3.0); print("removed 3.0", list); assert(i==1);
//     i = remove_node(&list, 1.0); print("removed 1.0", list); assert(i==1);
//     i = remove_node(&list, 2.0); print("removed 2.0", list); assert(i==1);
//     assert(list == NULL);

//     // Something to think about:
//     //
//     // Could we have implemented remove_node() so that you can pass 
//     // the result of find(), i.e., remove_node(find(2.0)) for example?
//     //
//     // If not, how can we modify our list structure to make it work?

//     return 0;
// }





// // ----------------------------------------------------------------
// // first part of lecture 5


// list1.c

// #include "list1.h"
// #include <string.h>


// struct Node *prepend(struct Node *list, char *s){
//         Struct Node *new_node = (struct Node *)malloc(sizeof(struct Node))
//         if (new_node == NULL){
//             perror("malloc failed");
//             exit(1);
//         }
//  new_node->len = strlen(max(s, 5));

//     if (strlen(s) <= 5){
//         new_node->len = strlen(s);
//         strcpy(new_node->data, s);
// }else {
//         new_node->len = 5;
//         strcpy(new_node->data, s, 5);
//         new_node->data[5] = '\0';
// }

// return new_node;
// }

// // make the current front of the list point to the new front


// // part 2
// // sort and reverse








// // part 3

// // int main() {
// //     int recipe[100] = {1,1,2,2,3};

// //     int size = 0;
// //     while(size<100){
// //         if(scanf("%d", &recipe[size]) == 1){
// //             break;
// //         }
// //         size++;
// //     }
// // int size = i;


// // }




// list.h



// // DO NOT MODIFY THIS HEADER FILE.

// #ifndef _LIST1_H_
// #define _LIST1_H_

// print len =
// got to next


// struct Node {
//     struct Node *next;
//     short len;
//     char data[6];
// };

// /*
//  * Create a node that stores the given string s if strlen(s) <= 5,
//  * or a substring consisting of the first 5 characters of s otherwise.
//  *
//  * 
//  * The string stored in the node is always null-terminated.
//  * In addition, the length of the stored string (not including null)
//  * is stored in the 'len' field of the Node structure.
//  *
//  * The node is added to the front of the given list, and the resulting
//  * list is returned.  NULL is returned if malloc for the node fails.
//  *
//  * If s is NULL, it is treated as if it were "".
//  */



// struct Node *prepend(struct Node *list, char *s);

// /*
//  * Does the same thing as strcpy(t,s), except that if strlen(s) > n,
//  * only the first n chars of s are copied.  The string t gets always 
//  * null-terminated, which means that t must point to a buffer of at least 
//  * min( strlen(s)+1, n+1 ) bytes.
//  *
//  * Both t and s are assumed to be not NULL.
//  */
// void strcpy_upto(char *t, const char *s, int n);

// /*
//  * Print the given list in the following format:
//  *
//  *     ->[len:data]->[len->data]->...->[len:data]
//  *
//  * For instance, a two-node list containing "one" and "world" will print:
//  *
//  *     ->[3:one]->[5:world]
//  *
//  * A newline is printed at the end.
//  */

// length:string

// void print(struct Node *list);



// /*
//  * Deallocates all nodes (i.e., free() each node.)
//  */
// void deallocate_list(struct Node *list);

// #endif /* #ifndef _LIST1_H_ */
